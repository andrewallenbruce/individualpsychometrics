---
title: "Scalars"
editor: source
---

```{r}
#| label: loaderscalars
#| include: false
#| cache: false
source("loader.R")
```

[Scalars]{.defword title="A **scalar** is a single value."} are single numeric values. They are the [elements]{.defword title="**Elements** are the individual numbers in a vector or matrix."} that compose vectors and matrices. Usually a scalar is represented as an italicized lowercase letter:

$$x = 9$$

Technically, there are no scalars in R. Pretty much everything in R is a vector of one kind of another, meaning that most variables can have multiple elements instead of being restricted to a single element. However, a vector with just one element is often treated like a scalar. This everything-is-a-vector feature of R makes a lot of things nice and easy for data analysis, though certain kinds of computations can be slower because of it. 

## Variable Assignment

If you want to make a "scalar" in R, you assign a value to a variable name like so:


```{r demo-scalarassignment}
x <- 1
```

:::{.column-margin}

In most situations, the `=` sign also functions as an assignment operator. It is easier to type than `<-`, so feel free to use it. 

```{r demo-scalarassignmentequal}
x = 1
```

The spaces around the assignment operator are optional, and you can use a more compact style if you wish:

```{r demo-scalarassignmencompact}
x=1
```

:::

The `<-` is called the *assignment operator*. Instead of typing both characters, I use the {{< kbd Alt+- >}} keyboard shortcut (i.e., press and hold {{< kbd Alt >}} while pressing `-`), which puts spaces around the assignment operator. Unfortunately, keyboard shortcuts work in RStudio only. They do not yet work inside the in-browser exercises of this book.




:::{.callout-note title="You Try"}

Create a variable `x` by assigning it a value of 5.

```{webr-r}
#| label: ex-assignment

```


```{r solution-assignment}
x <- 5

# If you prefer, the = assignment operator also works:
x = 5

# To display the value of x, just run it on its own line like so:
x

```

:::

## Scalar--Scalar Operations

Scalar operations are the basic arithmetical operators you are familiar with: addition, subtraction, multiplication, division, and exponentiation. 

For example,

$4 + 1 = 5$

4 and 1 are both scalars, and adding them results in a scalar (i.e., 5).

In R, scalar operations like addition are straightforward:

```{r demo-scalaradd}
4 + 1
```

:::{.column-margin}

By convention, we put spaces around most operator symbols (e.g., `+`, `-`, `*`, `/`, `^`, `=`) because it makes complex code easier to read. However, the spaces are optional, and R does not care if things look messy:

```{r demo-scalarspaces}
# Scalar addition
# Putting single spaces around the + operator looks nice
4 + 5

# R does not need spaces, though
4+5

# R does not care if you are inconsistent or have multiple spaces
4 +    5
```

:::

::: {.callout-note title="You Try"}

Add 3 + 2 in R

```{webr-r}
#| label: ex-addition

```

```{r solution-addition}
3 + 2
```

:::


Other basic operators are also straightforward. Scalar subtraction with the `-` operator:

```{r demo-scalarsubtract}
4 - 1
```

Scalar multiplication with the `*` operator:

```{r demo-scalarmult}
5 * 6
```

Scalar division with the `/` operator:

```{r demo-scalardiv}
6 / 3
```

Scalar exponentiation with the `^` operator:

```{r demo-scalarexponent}
3 ^ 2
4 ^ -1
4 ^ .5
```

::: {.callout-note title="You Try"}

Calculate 101 &minus; 78 in R.

```{webr-r}
#| label: ex-subtraction

```

```{r solution-subtraction}
101 - 78
```

Calculate 29 &times; 42 in R.

```{webr-r}
#| label: ex-multiplication

```

```{r solution-multiplication}
29 * 42
```

Calculate 33 squared in R.

```{webr-r}
#| label: ex-exponentiation

```

```{r solution-exponentiation}
33 ^ 2
```

:::
