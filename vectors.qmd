---
title: "Vectors"
---

```{r}
#| label: loadervectors
#| include: false
#| cache: false
source("loader.R")
```

```{r xy}
#| echo: false
x_plot <- 4
y_plot <- 3

```

[Vectors]{.defword}[A **vector** is an ordered sequence of values]{.defword .column-margin} are sequences of numbers. The notation for vectors is not always applied consistently, but often vectors are topped with an arrow (or are bold lowercase letters), and the elements are listed in parentheses and separated by commas. A vector $\vec{x}$ with elements `r x_plot` and `r y_plot` would be notated like so:

$$
\vec{x}=\left(`r x_plot`,`r y_plot`\right)
$$


The [vector length]{.defword}[A vector's **length** is the number of elements the vector contains.]{.defword .column-margin} refers to how many elements it has, not its magnitude. So a 2-element vector like $(x_1,x_2)$ has a length of 2.

A sequence of indeterminate length $n$, would be notated like so

$$
\vec{x}=\left(x_1,x_2,\ldots,x_n\right)
$$


## Making vectors in R

R is a peculiar peculiar language in that almost every object created in R is ultimately a vector of some kind or another. Here we are concerned with vectors made with real numbers (i.e., positive and negative numbers that can have decimals).[R can create vectors from many other types of data (e.g., integers, complex numbers, logical values, text, and raw binary numbers). A more advanced discussion about vectors in R can be found [here](https://adv-r.hadley.nz/vectors-chap.html). ]{.column-margin}

### Making vectors with the `c` function

Vectors in R are created in many ways, but the most common way to join vector elements is with the `c` function. The `c` function "combines" (or [concatenates]{.defword}[To **concatenate** is to link things together in a chain or series.]{.defword .column-margin}) elements into a vector. For example, to combine 3 and 5:

```{r demo-vector}
#| echo: true
x <- c(3, 5)
```

::: {.callout-note title="You Try"}

Create a vector `x` with values 2 and 6.

```{webr-r}
#| label: ex-vector
#| echo: true
x <- c(_, _)
x
```

```{r solution-vector}
x <- c(2, 6)
```

:::


### Making vector sequences with the `:` operator

You can make sequential integer sequences with the `:` operator. To make a sequence from 1 to 5:

```{r demo-vectorcolon}
1:5
```

To make a decreasing vector from 4 to 0:

```{r demo-vectorcolondecreasing}
4:0
```

::: {.callout-note title="You Try"}

Create a sequence of integers from 5 to 11 with the `:` operator.

```{webr-r}
#| label: ex-colon
_:_
```

```{r solution-colon}
5:11
```

:::

### Making vector sequences with `seq` function

The `seq` function allows for sequences of any interval or length.

```{r demo-vectorseq}
seq(1,5)
```

Decreasing from 5 to 1:

```{r demo-vectorseqdecreasing}
seq(5,1)
```

The `by` argument specifies the interval between elements. Here we specify a sequence from 0 to 1 by .1 intervals:

```{r demo-vectorseqincrements}
seq(0, 1, 0.1)
```

For decreasing sequences, the `by` argument needs to be negative:

```{r demo-vectorseqincrementsnegative}
seq(5, 3, -0.5)
```

::: {.callout-note title="You Try"}

Create a sequence of integers from 3 to 6 with the `seq` function.

```{webr-r}
#| label: ex-colon
seq(_,_)
```

```{r solution-threesix}
seq(3, 6)
```

Create a sequence of even integers from 2 to 10 with the `seq` function.

```{webr-r}
#| label: ex-even
seq(_,_,_)
```

```{r solution-even}
seq(2, 10, 2)
```


Create a decreasing sequence of integers from 6 to 3 with the `seq` function.

```{webr-r}
#| label: ex-decreasing
seq(_,_)
```

```{r solution-decreasing}
seq(6, 3)
```

Create a decreasing sequence of numbers from 1 to -1 decreasing by increments of 0.2.

```{webr-r}
#| label: ex-decreasing2
seq(_,_,_)
```

```{r solution-decreasing2}
seq(1, -1, -0.2)
```

:::

## Selecting Specific Elements in a Vector

In R, there are several ways to select elements in a vector---by position, by condition, and by name.

### Selecting by Position

Suppose we have a vector with 5 elements:

$$\vec{x}=\left(10,20,30,40,50\right)$$

First I define $\vec{x}$

```{r demo-definex}
#| echo: true
x <- seq(10, 50, 10)
x
```

The 3rd element, 30, can be selected like so:

```{r demo-selectthird}
#| echo: true
x[3]
```


::: {.callout-note title="You Try"}

Select the 4th element of `x`.

```{webr-r}
#| context: setup
x <- seq(10, 50, 10)
A <- matrix(1:12, nrow = 3, byrow = TRUE)
```

```{webr-r}
#| label: ex-fourth
x <- seq(10, 50, 10)
x[_]
```


```{r solution-fourth}
x[4]
```
:::


If I want both the 3rd and 5th elements, I use a vector inside the square brackets:

```{r demo-selectthirdfifth}
x[c(3, 5)]
```

::: {.callout-note title="You Try"}

Select first and fourth element of `x`.

```{webr-r}
#| label: ex-firstforth
x <- seq(10, 50, 10)
x[_]
```



```{r solution-firstforth}
x[c(1, 4)]
```
:::



### Selecting by Condition

R can select elements meeting any condition that evaluates to the logical value of `TRUE`. For example, which values of $\vec{x}$ are greater than 35?

```{r demo-showless35}
x > 35
```

This creates a vector of 5 elements that are either `TRUE` or `FALSE`. We can select just the elements for which the condition is `TRUE` like so:

```{r demo-selectless35}
x[x > 35]
```

::: {.callout-note title="You Try"}

Select elements of `x` less than 15.

```{webr-r}
#| label: ex-selectless
x <- seq(10, 50, 10)
x[_]
```



```{r solution-selectless}
x[x < 15]
```
:::


### Selecting by Name

In R, vector elements can have names. We can assign them directly like this:

```{r demo-makenamed}
x <- c(a = 1, b = 2, c = 3, d = 4, e = 5)
x
```

We can also assign names using the `names` function:

```{r demo-usenames}
x <- 1:5
x_names <- c("a", "b", "c", "d", "e")
names(x) <- x_names
x
```

We can select specific named elements like so:

```{r demo-selectad}
x[c("a", "d")]
```

We can select them in any order:

```{r demo-selectda}
#| echo: true
x[c("d", "a")]
```

We can even have repeats:

```{r demo-selectrepeat}
#| echo: true
x[c("a", "a", "b")]
```

::: {.callout-note title="You Try"}

Select elements `b` and `a` of `x`, in that order .

```{webr-r}
#| label: ex-selectnames
x <- c(a = 1, b = 2, c = 3, d = 4, e = 5)
x[_]
```

```{r solution-selectnames}
x[c("b", "a")]
```
:::


## Scalar--Vector Operations

When a scalar and a vector appear together in an operation, the operation is applied to the scalar and to every element in the vector. For example, to multiply a scalar by a vector, multiply every element in the vector by the scalar. If *a* is a scalar,


$$a\vec{x}=\left(ax_1, ax_2,\ldots, ax_n\right)$$


They are called "scalars" because a scalar multiplied by a vector "scales" the vector by changing its magnitude.

$$\left\|a\vec{x}\right\|=a\left\|\vec{x}\right\|$$

You can play with scalar multiplication with the web app in @fig-scalar. Set the *x* and *y* coordinates for the blue vector, and alter the scalar *a* to see how the red vector's magnitude changes. When *a* is negative, the red vector reverses direction.

```{ojs scalar-calculations}
viewof fs = 
Inputs.form({
  xi: Inputs.range([-1,1], {
    format: (x) => x,
    value: 1, 
    step: .01, 
    label: md`*x* `,
    labelStyle: "width: 50px"
  }),
  yi: Inputs.range(
    [-1,1], 
    {value: 1, 
     step: .01, 
     vertical: true, 
     label: md`*y*`}),
  a: Inputs.range(
    [-5,5], 
    {value: 2, 
     step: .01, 
     label: md`*a* `, 
     description: 'Scalar'})
  })
ax = fs.xi * fs.a
ay = fs.yi * fs.a
theta=Math.atan2(ay,ax)
dd=[{
  x: fs.xi, 
  y: fs.yi, 
  ax: ax, 
  ay: ay, 
  x0: 0, 
  y0: 0, 
  a: fs.a, 
  theta: theta }]

ns = Inputs.range().classList[0]

html`
<style>
form.${ns} {--input-width: 600px; --label-width: 15px;}
.${ns}-input>input[type=number] {flex-shrink:6;}
</style>
`
```



```{ojs fig-scalar}
//| label: fig-scalar
//| fig-cap: "Multiplying a vector by a scalar changes its magnitude."
//| cache: true
//| fig-cap-location: margin

Plot.plot({height: 600, width: 600,
x: {domain: [-5, 5], grid: true, ticks: 9},
y: {domain: [-5, 5], grid: true, ticks: 9},
style: {
    fontSize: 14, 
    fontFamily: "equity_text_a_tab"
  },
marks: [
Plot.ruleY([0]),
Plot.ruleX([0]),
Plot.arrow(
  dd, 
  {x1: "x0", 
   y1: "y0", 
   x2: "ax", 
   y2: "ay", 
   stroke: "#8B1A1A", 
   headAngle: 30, 
   headLength: 10, 
   fill: "#8B1A1A"}),
Plot.arrow(
  dd, 
  {x1: "x0", 
   y1: "y0", 
   x2: "x", 
   y2: "y", 
   stroke: "#27408B", 
   headAngle: 30, 
   headLength: 10, 
   fill: "#27408B"}),
  Plot.text(
    dd, 
    {x: (d) => d.ax + .3 * Math.cos(d.theta), 
     y: (d) => d.ay + .3 * Math.sin(d.theta), 
     text: (d) => '('+(d.ax).toFixed(2)+', '+(d.ay).toFixed(2)+')'})
]})
```


```{r codeojs-fig-scalar}
<<scalar-calculations>>
<<fig-scalar>>
```

Scalar-vector division looks just like it does in regular algebra and can take on a variety of forms:

$$
\vec{x}/a=\frac{\vec{x}}{a}=\frac{1}{a}\vec{x}=a^{-1}\vec{x}=\vec{x}\div a
$$

Scalar--vector addition and subtraction work in similar fashion. To add scalar to a vector:

$$\vec{x}-a=\left(x_1+a,x_2+a,\ldots,x_n+a\right)$$

To subtract:

$$\vec{x}-a=\left(x_1-a, x_2-a,\ldots,x_n-a\right)$$

In R, 

```{r demo-scalarvectoradd}
x <- c(1,2)
x + 5
x - 1
```


### Vector Addition 

To add two vectors, add each element at the same position:

$$
\begin{aligned}
\vec{x}&= \left(x_1,x_2,\ldots,x_n\right)\\
\vec{y}&= \left(y_1,y_2,\ldots,y_n\right)\\
\vec{x}+\vec{y}&= \left(x_1+y_1,x_2+y_2,\ldots,x_n+y_n\right)\\
\end{aligned}
$$

As an example:

$$
\begin{aligned}
\vec{x}&= \left(1,2\right)\\
\vec{y}&= \left(3,4\right)\\
\\
\vec{x}+\vec{y}&= \left(1+3,2+4\right)\\
&= \left(4,6\right)
\end{aligned}
$$

Vector subtraction works the same way as vector addition, subtracting each element at the same position:

$$
\vec{x}-\vec{y}= \left(x_1-y_1,x_2-y_2,\ldots,x_n-y_n\right)\\
$$

Adding and subtracting two vectors is only defined when the vectors have the same number of elements. Thus, if $\vec{x}= \left(1,2\right)$ and $\vec{y}= \left(3,2,1\right)$, there is no defined way to add $\vec{x}$ and $\vec{y}$.


In R, adding and subtracting vectors is beautifully easy. Unlike many programming language, we do not need to create looping structures to add each element pair one at a time. We just define the vectors and add them:


```{r demo-vectoraddition}
x <- c(1, 2)
y <- c(3, 4)
x + y
```



::: {.callout-note title="You Try"}

If vector $\vec{a}$ is (5, 6) and vector $\vec{b} is (10, 1), what is the sum of $\vec{a} and $\vec{b}? Use R to compute your answer.

```{r solution-addvectors}
a <- c(5, 6)
b <- c(10, 1)
a + b
```

:::


In @fig-vector-addition, you can see that adding vectors is like 



```{ojs scalar-addition}
//| echo: false
viewof fsab = 
Inputs.form({
  ax: Inputs.range([-1,1], {
    format: (x) => x,
    value: 1, 
    step: .01, 
    label:html`<em>a<sub>x</sub></em>`,
    labelStyle: "width: 50px"
  }),
  ay: Inputs.range(
    [-1,1], 
    {value: 0.5, 
     step: .01, 
     label: html`<em>a<sub>y</sub></em>`}),
  bx: Inputs.range(
    [-1,1], 
    {value:0.5, 
     step: .01, 
     label: html`<em>b<sub>x</sub></em>`}),
  by: Inputs.range(
    [-1,1], 
    {value: 1, 
     step: .01, 
     label: html`<em>b<sub>y</sub></em>`})
  })
ab=[{x0: 0, 
     y0: 0, 
     ax: fsab.ax, 
     ay: fsab.ay, 
     bx: fsab.bx, 
     by: fsab.by, 
     abx: fsab.ax + fsab.bx, 
     aby: fsab.ay + fsab.by, 
     theta: Math.atan2(fsab.ay + fsab.by, fsab.ax + fsab.bx), 
     thetaa: Math.atan2(fsab.ay, fsab.ax), 
     thetab: Math.atan2(fsab.by, fsab.bx), 
     a: 'a', 
     b: 'b', 
     ab:'a + b', 
     fill: '#ffffff', 
     r: 200}]


```



```{ojs fig-vector-addition}
//| label: fig-vector-addition
//| fig-cap: "Adding vectors a and b."
//| cache: true
//| fig-cap-location: margin
//| echo: false
Plot.plot({height: 600, width: 600,
x: {domain: [-2, 2], grid: true, ticks: 9},
y: {domain: [-2, 2], grid: true, ticks: 9},
style: {
    fontSize: 14, fontFamily: "equity_text_a_tab"
  },
marks: [
  Plot.ruleY([0]),
  Plot.ruleX([0]),
  Plot.arrow(
    ab, 
    {x1: "x0", 
     y1: "y0", 
     x2: "ax", 
     y2: "ay", 
     stroke: "#8B1A1A", 
     headAngle: 30, 
     headLength: 10, 
     fill: "#8B1A1A"}),
  Plot.arrow(
    ab, 
    {x1: "ax", 
     y1: "ay", 
     x2: "abx", 
     y2: "aby", 
     stroke: "#27408B", 
     headAngle: 30, 
     headLength: 10, 
     fill: "#27408B", 
     alpha: .5}),
  Plot.arrow(
    ab, 
    {x1: "x0", 
     y1: "y0", 
     x2: "abx", 
     y2: "aby", 
     stroke: "#51315E", 
     headAngle: 30, 
     headLength: 10, 
     fill: "#51315E"}),
  Plot.dot(
    ab, 
    {x: (d) => d.ax/2, 
     y: (d) => d.ay/2, 
     fill: "fill", 
     r: 7}),
  Plot.dot(
    ab, 
    {x: (d) => d.ax + d.bx/2, 
     y: (d) => d.ay + d.by/2, 
     fill: "fill", 
     r: 7}),
  Plot.dot(
    ab, 
    {x: (d) => d.abx/2, 
     y: (d) => d.aby/2, 
     fill: "fill", 
     r: 18}),
  Plot.text(
    ab, 
    {x: (d) => d.ax/2, 
     y: (d) => d.ay / 2, 
     text: 'a', 
     rotate: (d) => Math.atan(Math.tan(d.thetaa)) * -180 / Math.PI, 
     fill: '#8B1A1A'}),
   Plot.text(
     ab, 
     {x: (d) => d.ax + d.bx/2, 
      y: (d) => d.ay + d.by / 2, 
      text: 'b', 
      rotate: (d) => Math.atan(Math.tan(d.thetab)) * -180 / Math.PI, 
      fill: '#27408B'}),
  Plot.text(
    ab, 
    {x: (d) => d.abx/2, 
     y: (d) => d.aby / 2, 
     text: 'ab', 
     rotate: (d) => Math.atan(Math.tan(d.theta)) * -180 / Math.PI, 
     fill: '#51315E'})
]})
```

```{r codeojs-fig-vector-addition}
<<scalar-addition>>
<<fig-vector-addition>>
```


```{r fig-vector}
#| fig-cap: !expr paste0("A vector of (",x_plot,", ",y_plot,") moves ",x_plot," units to the right and ",y_plot," units up from the origin.")
#| fig-height: 6
#| fig-width: 6
#| cache: true
#| echo: false
#| fig-column: margin

tibble(x = c(0, x_plot), y = c(0, y_plot)) |>
  ggplot(aes(x, y)) +
  geom_point(color = myfills[1], size = .75) +
  geom_arrow(arrow_head = arrow_head_deltoid(),
    linewidth = 1,
    color = myfills[1],
        resect_head = 1,
  ) +
  geom_arrow_segment(arrow_head = arrow_head_deltoid(), 
             arrow_fins = arrow_head_deltoid(),
             data = tibble(x = c(-5.5, 0),
                           y = c(0, -5.5),
                           xend = c(5.5, 0),
                           yend = c(0, 5.5)),
             aes(xend = xend, yend = yend),
    linewidth = .75,
    linemitre = 2,
    linejoin = "mitre",
    color = "gray"
  ) +
  theme_classic(
    base_family = bfont,
    base_size = 20,
    base_line_size = .5
  ) +
  theme(
    axis.text = element_text(color = "gray40"),
    axis.line = element_blank(),
    axis.ticks = element_line(color = "gray"),
    axis.title.x = element_text(
      angle = 0,
      vjust = .5,
      face = "italic",
      color = "gray40"
    ),
    axis.title.y = element_text(
      angle = 0,
      vjust = .5,
      face = "italic",
      color = "gray40"
    )
  ) +
  scale_x_continuous(name = "y", 
                     breaks = c(-5:-1, 1:5), 
                     labels = WJSmisc::signs_centered) +
  scale_y_continuous(name = "x", 
                     breaks = c(-5:-1, 1:5), 
                     labels = signs) +
  ggh4x::coord_axes_inside(
    xlim = c(-5, 5),
    ylim = c(-5, 5),
    labels_inside = T,
    ratio = 1
  ) +
  annotate(
    "richtext",
    x_plot,
    y_plot,
    label = paste0("**v** = (", 
                   x_plot, 
                   ", ", 
                   y_plot, 
                   ")"),
    label.color = NA,
    vjust = -.2,
    hjust = 0.5,
    fill = NA,
    size = WJSmisc::ggtext_size(18),
    label.r = unit(5, "mm"),
    color = myfills[1]
  ) +
  annotate(
    "richtext",
    x_plot / 2,
    y_plot / 2,
    label = paste0("Magnitude of **v**: \u2016**v**\u2016 = ", 
                   round(sqrt(x_plot ^ 2 + y_plot ^ 2),2)),
    label.color = NA,
    angle = atan2(y_plot,x_plot) * 180 / pi,
    vjust = 0,
    hjust = 0.5,
    fill = NA,
    size = WJSmisc::ggtext_size(18),
    label.r = unit(5, "mm"),
    color = myfills[1]
  )

```

A vector with two scalar elements can be thought of as an arrow in a coordinate plane, as in @fig-vector. The vector $\left(`r x_plot`, `r y_plot`\right)$ is an arrow that displaces any point it is added to by `r x_plot` units to the right and `r y_plot` units up. 

```{r coder-fig-vector}
<<fig-vector>>
```


### Vector Norms

If we visualize a vector as an arrow, we can ask how long the arrow is from end to end. The [norm]{.defword}[A vector's **norm** is the Euclidean distance of the vector's *n* elements to the origin in *n*-dimensional space.]{.defword .column-margin} is the vector's magnitude. Imagine the vector's *n* elements plotted as a single point in *n*-dimensional space. The norm is the distance of the point to the origin (i.e., a vector of *n* zeroes). The distance referred to here is technically the Euclidean distance, which is a generalization of the Pythagorean Theorem to more than 2 dimensions. To calculate it, take the square root of the sum of all squared values in the vector.

:::{.column-margin}

Vector norms sometimes have notation that can be confused with absolute values: 

$$\left|\vec{x}\right|$$

The notational confusion is not accidental. Scalar absolute values and vector norms both refer to magnitude. Indeed, if you apply the formula for vector norms to a vector with one element, the result is  the absolute value:

$$\sqrt{x_1^2} = |x_1|$$


However, to avoid the ambiguity between vector norms and taking the absolute value of each element, I will use the double bar notation: 

$$\left\|\vec{x}\right\|$$

I tend to be fastidious about distinguishing between *vector length* (the number of elements in a vector) and vector *norms* (the vector's magnitude) because the concepts are easily confused. Further confusion is that the norm of a vector is not the same thing as a *normal vector*, which is a vector that is perpendicular to a surface (e.g., a plane, a sphere, or any other multidimensional object) at a given point. A normal vector has nothing to do with the normal distribution.

:::


$$\left\|\vec{x}\right\|=\sqrt{x_1^2+x_2^2+\ldots+x_n^2}$$

To calculate a vector norm in R by hand is straightforward:

```{r demo-vector-norm}
x <- c(4, 3)
sqrt(sum(x ^ 2))
```

If you can remember that this kind of norm (there are others) is a "type 2" norm, then a vector norm can be calculated with the `norm` function:

```{r demo-norm-function}
norm(x, type = "2")
```



### Unit Vectors

A vector norm is useful for creating [unit vectors]{.defword}[A *unit vector* $\vec{u}$ has a norm of 1: $\left\|\vec{u}\right\|=1$]{.defword .column-margin}, which have the same direction as the original vector but have a norm (i.e, magnitude) of 1.

So a unit vector $\vec{u}$ that has the same direction as vector $\vec{x} = \left(3,4\right)$ is:

$$
\begin{align*}
\vec{u}&=\frac{\vec{x}}{\left\|\vec{x}\right\|}\\
&=\frac{\left(3,4\right)}{\sqrt{3^2+4^2}}\\
&=\frac{\left(3,4\right)}{5}\\
&=\left(.6,.8\right)
\end{align*}
$$

We can verify that $\vec{u}$ has a norm of 1:

$$
\begin{align*}
\left\|\vec{u}\right\|&=\left\|\left(.6,.8\right)\right\|\\
&=\sqrt{.6^2+.8^2}\\
&=1
\end{align*}
$$


Unit vectors have many uses, including the calculation of correlation coefficients.

### Vector Multiplication

There are several different ways that vectors can be multiplied. For now, the most important are element-wise multiplication and dot-product multiplication.

#### Element-wise Multiplication $(\circ)$

This kind of multiplication is analogous to vector addition and subtraction. If two vectors have the same length (i.e, number of elements), element-wise multiplication creates a vector of the same length by multiplying each element. Thus,

$$
\begin{aligned}
\vec{x}&= \left(x_1,x_2,\ldots,x_n\right)\\
\vec{y}&= \left(y_1,y_2,\ldots,y_n\right)\\
\vec{x}\circ \vec{y}&= \left(x_1y_1,x_2 y_2,\ldots,x_n y_n\right)\\
\end{aligned}
$$

In R, element-wise multiplication is straightforward. Just multiply the vectors with the `*` operator.

```{r demo-element-wise multiplication}
x <- c(1, 2, 3)
y <- c(2, 4, 6)
x * y
```



#### Dot-Product Multiplication $(\cdot)$

This is the same as element-wise multiplication, but the products are added together to create a scalar. 

$$
\begin{aligned}
\vec{x}&= \left(x_1,x_2,\ldots,x_n\right)\\
\vec{y}&= \left(y_1,y_2,\ldots,y_n\right)\\
\vec{x}\cdot \vec{y}&= x_1 y_1+x_2 y_2+\ldots+x_n y_n\\
\end{aligned}
$$


If $\vec{x}=(1,2)$ and $\vec{y}=(3,4)$,

$$
\begin{aligned}
\vec{x} \cdot \vec{y}&=1\cdot 3+2\cdot 4\\
&=3+8\\
&=11
\end{aligned}
$$

As will be seen later, the dot-product of 2 vectors is performed in R with the same operator as matrix multiplication: `%*%`.

```{r demo-innerproduct}
x <- c(1, 2)
y <- c(3, 4)
x %*% y
```

However, if this is hard to remember, then the dot product can thought of as "the sum of the elements multiplied" like so:

```{r demo-summultiply}
sum(x * y)
```

I was surprised to learn that in matrix algebra dot-product multiplication is much more often used than element-wise multiplication. Indeed, matrix multiplication consists of many dot-product multiplications. Apart from that, dot-product multiplication has a number of important applications related to the Law of Cosines, finding orthogonal vectors (i.e., vectors at right angles), and the geometric interpretation of correlation coefficients. I will leave those topics for later.
