{
  "hash": "a96bbf8f52bf63cbba4c32dab4d6494c",
  "result": {
    "markdown": "\n\n\n# Getting Ready to Use R via RStudio\n\nThis book can be read and understood without using R at all. However, many of the calculations discussed would be quite difficult without the statistical functions of a language like R.\n\n## Get Ready for a Challenge\n\n![\"*Blooming, buzzing confusion*?\" I see what you did there. ---WJ](https://upload.wikimedia.org/wikipedia/commons/9/9c/William_James_b1842c.jpg \"William James\"){#fig-williamjames .column-margin width=200}\n\n\n\nFor R to pay off, you have to buy in. Learning challenging material does not have to be \"fun\" at every moment to be worthwhile. The beginning data analyst, assailed by statistical concepts, coding conventions, and baffling error messages, *feels it all as one great blooming, buzzing confusion*.\n\nThe challenge of learning R is indeed going to be challenging at times, but just there will also be many little *a-ha* moments, several larger check-out-what-I-can-do celebrations, and a few peak experiences of eudaemonic reverie.\n\n## What is R?\n\nR is the eighteenth letter of the alphabet, of course, but for data analysts, it has several specialized meanings.\n\n### R is a programming language built for statistics.\n\n\n\n\n\n![[John Chambers](https://www.wikiwand.com/en/John_Chambers_(statistician))](images/John_Chambers.png \"John Chambers\"){#fig-chambers .column-margin width=200 fig-alt=\"A headshot of statistician John Chambers\"}\n\n![[Robert Gentleman](https://www.wikiwand.com/en/Robert_Gentleman_(statistician))](images/r_gentleman.jpg \"Robert Gentleman\"){#fig-gentleman .column-margin width=200 fig-alt=\"A headshot of statistician Robert Gentleman\"}\n\n![[Ross Ihaka](https://www.wikiwand.com/en/Ross_Ihaka)](images/Ihaka.jpg \"Ross Ihaka\"){#fig-ihaka .column-margin width=200  fig-alt=\"A headshot of statistician Ross Ihaka\"}\n\n\n\n\n\nIn 1976, [John Chambers](https://www.wikiwand.com/en/John_Chambers_(statistician)) and colleagues at Bell Labs developed [S](https://www.wikiwand.com/en/S_(programming_language)){target=\"_blank\"}, a programming language specifically designed to facilitate statistical analyses and data visualization.\n\nIn 1995, [Robert Gentleman](https://www.wikiwand.com/en/Robert_Gentleman_(statistician)) and [Ross Ihaka](https://www.wikiwand.com/en/Ross_Ihaka) released an open-source variant of S and named it \"R\" after their shared first initial.\n\nMost S code looks identical to R code, but R has a number of subtle enhancements such as better memory management.\n\n[More about the origins of R](https://www.stat.auckland.ac.nz/~ihaka/downloads/Interface98.pdf){target=\"_blank\"}\n\n### R is a computer program that runs code in the programming language R.\n\nThe primary way that the R language is used is to perform analyses in the R software environment for statistical computing and graphics. This program is free and open source, meaning that not only can anyone download it for free, but its source code can be reused by anyone for any purpose.\n\n### R is a data science ecosystem in which the R community flourishes\n\nStrictly speaking, R is just one program. However, people use R in startlingly creative ways, often in combination with other programs and in coordination with other people. I like to think of R as the entire ecosystem of software, services, standards, and cultural practices shared by the entire community of R users.\n\nThe technical merits of the R language and software do matter, but the success of R has more to do with the inclusive, welcoming, diverse, and expanding culture of the R community. When an individual R user has a great idea, the R community has as integrated set of technical standards, web services, and cultural practices such that innovations spread quickly to everyone in the community---often with multiple tutorials aimed at users of all levels of expertise. With the support of the R community, ordinary people can leverage R to accomplish far more than anyone would have thought possible not so very long ago.\n\n\n\n## What can you do with R?\n\nWhat *can't* be done with R is an ever-contracting list. If you let it, R will help you in ways you did not know you needed it. You can (and should) use R for tasks that extend well beyond analyzing data. Because R plays well with many other programs, you can leverage its capacities to do all sorts of things:\n\n-   Manage data\n-   Analyze data\n-   Visualize data\n-   Control and run other programs\n-   Write and publish books, papers, and posters\n-   Create presentations, tutorials, websites, web apps, and digital a**R**t\n\n\n\n\n\nFor example, this Tutorial was \"created in R.\" That is, I wrote the text in a simple format and then let R (and RStudio) handle all the complex and tedious coordination of many other programs to make this webpage. It does most of its work under the hood without my awareness.\n\n## What is RStudio?\n\nIn this class, we will probably never actually open the R program directly. Why not? R's text editor works well for what it does, but it has limited functionality compared to other ways of interacting with R. Instead, we will run R code in an integrated development environment (IDE) called [RStudio](https://rstudio.com/products/rstudio/download/){target=\"_blank\"}. An IDE is a program that makes programming easier. RStudio has many features that automates tasks what would otherwise be confusing, difficult, or tedious.\n\n## Code \\> Clicks\n\n![Artwork by [\\@allison_horst](https://github.com/allisonhorst/stats-illustrations)](images/r_first_then.png)\n\nThough R will be frustrating at times, stick with it---the dividends on your invested efforts are huge. Nothing beats the flexibility, freedom, and power of using code. Not only can I do things much faster than I could with point-and-click programs, I can do things I never would have considered doing. If there are no functions that do exactly what you want, you can adapt or make one that fits your needs perfectly. If you need to to re-run your analysis with a point-and-click menu interface, you need a perfect memory of what you did before. With code, every step is perfectly preserved.\n\n## A point-and-click alternative to RStudio\n\n[![jamovi](https://www.jamovi.org/assets/header-logo.svg)](https://www.jamovi.org)\n\nThat said, if you need to complete a simple data-analysis task quickly, and you have no time to learn R, I recommend using [jamovi](https://www.jamovi.org/). Jamovi has a beautiful point-and-click interface that you can learn to use in just a few minutes. Jamovi uses R under the hood, and like R, it is free.\n\nThe ease of use of a point-and-click interface has a trade-off. If you never learn to code, you will be stuck with a limited set of skills and many tasks will be prohibitively complicated or dauntingly tedious. In @fig-learningcurve I recreate a plot made by many others before me.\n\n\n::: {.cell .tbl-cap-location-margin layout-align=\"center\" hash='gettingready_cache/html/fig-learningcurve_cfe27e350da8c5d5961dd5c9b7fabf39'}\n::: {.cell-output-display}\n![Different Learning Curves for Different Tasks](gettingready_files/figure-html/fig-learningcurve-1.png){#fig-learningcurve fig-align='center' width=672}\n:::\n:::\n\n\n## Installing R\n\nInstallation depends on your operating system. If you have already installed R, make sure you have the latest version.\n\n### Windows\n\n[Click [here](https://cloud.r-project.org/bin/windows/base/){target=\"_blank\"} and download the latest version of R for Windows. Open the file and follow installation instructions.]{.instruction}\n\n[![Screenshot of Windows Installation Link](WindowsInstall.png)](https://cloud.r-project.org/bin/windows/base/)\n\n### Mac\n\n[Click [here](https://cloud.r-project.org/bin/macosx/) and download the latest version of R for Mac. Double-click the file and follow installation instructions.]{.instruction}\n\nThe instructions can be overwhelming to newcomers so I have included a picture with the download link highlighted:\n\n[![Screenshot of Mac Installation Link](MacInstall.png)](https://cloud.r-project.org/bin/macosx/)\n\n### Linux\n\n[Install R on Ubuntu with this Bash script:]{.instruction}\n\n\n::: {.cell .tbl-cap-location-margin layout-align=\"center\" hash='gettingready_cache/html/unnamed-chunk-3_9f73d5319ee17d3cb631888d309061c4'}\n\n:::\n\n\nIf you are a Linux user, you probably know what this means. If not, you probably do not. More detailed instructions [here](https://cran.r-project.org/bin/linux/ubuntu/README){target=\"_blank\"}.\n\n## Installing RStudio\n\n### RStudio Desktop\n\nRStudio is free. **Please do not pay for anything.** The paid versions of RStudio have nothing you will need for this course. They are not better than the free version. They simply have features tailored to businesses and developers.\n\n[Install the free version of RStudio Desktop [here](https://rstudio.com/products/rstudio/download/#download){target=\"_blank\"}.]{.instructions}\n\nThe version recommended for your operation system (I'm using Windows) will appear here:\n\n[![Screenshot of RStudio Installation Link](RStudioInstall.png)](https://rstudio.com/products/rstudio/download/#download)\n\n### RStudio Cloud\n\nOne alternative to installing R and RStudio on your machine is to use RStudio in a web browser in [RStudio Cloud](https://rstudio.cloud/). After signing up for a free account, you can use RStudio online. As the internet speeds up, I imagine that this option will become increasingly attractive.\n\n## Recommended RStudio Customization\n\nTo customize RStudio, click the *Tools* menu, then *Global Options*.\n\n![Global Options Menu](GlobalOptions.png)\n\nI strongly recommend changing the default data saving behavior to never restoring old sessions and never saving data in memory. Old variables lurking unnoticed in memory cause mystifying errors and baffling behavior. Starting each session fresh will prevent hours and hours of frustrating debugging.\n\n![General Options](workspace_options.png)\n\nIf you use a dark theme, you might have less eye strain. Up to you, though.\n\nI change my code theme from time to time but for some reason I always return to the Tomorrow Night 80s theme.\n\nFor teaching, I use Consolas. For myself, I use Fira Code. It uses font ligatures to combine symbols in a pleasing manner.\n\n![Appearance Options](appearance_options.png)\n\nA complete list of options explained [here](https://support.rstudio.com/hc/en-us/articles/200549016-Customizing-RStudio){target=\"_blank\"}.\n\n## Using RStudio\n\n[Open RStudio the same way you would any other program in your operating system.]{.instructions}\n\n## A Quick Tour of RStudio's 4 Panes\n\nRStudio may appear overwhelming at first. That feeling will fade quickly with use. By default, RStudio has 4 panes where you can interact with R in different ways.\n\n![Quick Tour of RStudio](RStudioTour.gif)\n\n### The Console\n\nThe console (lower left) is where you submit quick temporary calculations and run code you have no intention of saving. Hit `Enter` to submit code to R. R is interactive in the sense that it will display the result of the code in the console where you typed.\n\n### Scripts\n\nThe script pane (upper left) is for writing code you want to preserve in a script file (.R) or RMarkdown file (.Rmd). More on RMarkdown later. Save your script files frequently.\n\nYou can submit code to the console by hitting Ctrl+Enter (or ⌘+Enter on Macs). You can also submit code by hitting the Run button. If you have code selected, only the selected part will be submitted. If you have no code selected, the current line (wherever the cursor is) will be submitted.\n\n### Environment Variables\n\nIn the Environment tab in the upper right pane, you can see which variables have been created and a preview of what they contain.\n\n### Viewer\n\nThe lower right pane has several tabs:\n\n-   **Files**: Interact with project files\n-   **Plots**: Preview plots\n-   **Packages**: Install and update packages\n-   **Help:** Search for help\n-   **Viewer**: View documents created by RStudio\n\n## Installing and Updating Packages\n\nWhat comes installed with R is called \"Base R,\" which by itself is quite powerful. However, what makes R especially great is the fact that tens of thousands of free \"packages\" are available in a central repository called CRAN. These packages extend what R can do far beyond what any one person could have imagined.\n\nIn the bottom right pane, click the `Packages` tab.\n\n/\n\n![R Packages](package_install.png)\n\nAny new package you need but do not have, you can click the `Install` button and type the name of a new package. For example, click `Install` button, type `tidyverse` in the Packages textbox, and click `Install`.\n\nYou might have to wait a while, but now many new packages have been installed on your machine.\n\nYou do not need to install packages again. However, I update all my packages each time I use RStudio to make sure I have the best and most up-to-date versions of the packages available.\n\n## Create a New Project\n\nWhen you take on a new data-analysis task, you will want to keep your files organized in a particular folder. You want to make sure that this folder is the first place that R will look when you specify a file name. Otherwise we will have to write out the entire file name, which will be likely different if we need to run the same analysis on a different computer.\n\nRStudio's \"projects\" are useful for making sure that all your analyses are in the same folder and that your analyses will work no matter which machine runs it.\n\nWithout projects, we would need to write out the entire file name like so:\n\n::: {.column-margin}\nTechnically, there are other ways around this problem, but they are not recommended.\n:::\n\n\n::: {.cell .tbl-cap-location-margin layout-align=\"center\" hash='gettingready_cache/html/unnamed-chunk-4_1a316243b3bea0705cbd275beff695d0'}\n\n:::\n\n\nWith projects, we can import data with just the bare file name, like so:\n\n\n::: {.cell .tbl-cap-location-margin layout-align=\"center\" hash='gettingready_cache/html/unnamed-chunk-5_7eb8634606b5620d91e32f7b78a5b277'}\n\n:::\n\n\n\n\n\n\nMuch better!\n\nOkay, let's get to it.\n\n**Steps to create a project**\n\n<div class=\"instruction\">\n\n1.  In your operating system, create a folder for this course on your computer (e.g., \"EDUC8825\" or \"Longitudinal Data Analysis\").\n\n2.  Open RStudio.\n\n3.  Create a new project in the folder for this class.\n\n    -   Click **File-\\>New Project**\n    -   Select **Existing Directory**\n    -   Click **Browse**\n    -   Navigate to the new folder.\n    -   Click **Open**\n    -   Click **Create Project**\n\n</span>\n\n## Be Kind to Future-You\n\nHadley Wickham reminds us that the most important person to write code for is future-you.\n\nAt all times, work with the assumption that 10 minutes from now, you will suffer catastrophic *datamnesia*---memory failure for everything related to your analysis.\n\n::: {align=\"center\"}\n![*Datamnesia* happens all the time.](https://media.giphy.com/media/RSTWNZcvvdDOw/giphy.gif)\n:::\n\nPresent-you thinks future-you has god-like memory capacity. Future-you has very human and very fallible memory. Predicting is hard, especially about the future and what future-you will remember.\n\nFuture-you spends an inordinate amount of time recreating what present-you thought future-you would understand and remember---so much time that future-you neglects to take care of future--future-you. *Future-you won't take care of anything unless present-you learns to take care of future-you.*\n\n## Folder Organization\n\n-   Bad: All files on your desktop\n-   Also Bad: All files in the default folder (e.g., My Documents)\n-   Worse: Important files scattered in various folders with no organization.\n-   Even worse: Important files are in your Downloads folder where they are likely to be overwritten or deleted.\n-   Good: Use a file synchronization service like Dropbox, Box, OneDrive, GoogleDrive, etc.\n-   Also Good: Within your file synchronization service, have a well-organized hierarchical structure to your folders.\n-   Even Better: Use version control software like [Git](https://git-scm.com/), and save the code in an online repository like [GitHub](https://github.com/).\n\n\n::: {.cell .tbl-cap-location-margin layout-align=\"center\" hash='gettingready_cache/html/unnamed-chunk-6_7fc73c4730ec176d3afa7d801e9d5486'}\n\n:::\n\n\n## File Name Guidance\n\nGiving convenient, easily understood names to files, whether data files, image files, or script files can have far-reaching consequences for both present-you and future-you.\n\nDetailed advice on naming things from Jenny Bryan found [here](http://www2.stat.duke.edu/~rcs46/lectures_2015/01-markdown-git/slides/naming-slides/naming-slides.pdf). My shortened presentation draws from her ideas.\n\n### Give your files long, descriptive names.\n\nMake it clear to future-you exactly what is in the file.\n\n-   **Bad**: `data.xlsx`\n-   **Better**: `dissertation_data.csv`\n-   **Even Better**: `student_questionnaire_time_1.csv`\n\n### Separate words with underscores, not spaces.\n\nReplace spaces with underscores (`_`). Spaces often work fine, but sometimes they do not, which can result in hours and hours of debugging. Play it safe and don't use spaces in file names.\n\n`student scores.xlsx` → `student_scores.xlsx`\n\n### No special characters in file names:\n\nAvoid including in file names characters that have special meanings in many programming languages such as `*@^$!` and many others. Otherwise unexpected results can make your life complicated.\n\n`parent@emotion*survey.csv` → `parent_emotion_survey.csv`\n\n### Separate dates with hyphens using ISO format\n\n::: {align=\"center\"}\n![from [XKCD](https://xkcd.com/1179/)](https://imgs.xkcd.com/comics/iso_8601.png)\n:::\n\n[ISO format](https://www.iso.org/iso-8601-date-and-time-format.html) for dates is YYYY-MM-DD, meaning that a four-digit year comes first, followed by a two-digit month, followed by a two-digit day. This format makes sorting order much easier than the formats used in the U.S.\n\nHere is a data file name that begins with a date, followed by the school district from from the data were collected:\n\n`2020-01-12_district_A.csv`\n\nOne of the benefits of using dates in the ISO format is that they sort chronologically. Which file names would you prefer to deal with?\n\n\n::: {.cell .tbl-cap-location-margin layout-align=\"center\" hash='gettingready_cache/html/unnamed-chunk-7_9b31a7156bea1c3e7304c5361413bece'}\n::: {.cell-output-display}\n|Sorted Traditional Dates         |Sorted ISO Dates          |\n|:--------------------------------|:-------------------------|\n|August 03, 2010_District_B.csv   |2010-08-03_District_B.csv |\n|January 04, 2012_District_Q.csv  |2012-01-04_District_Q.csv |\n|July 13, 2014_District_H.csv     |2012-03-06_District_W.csv |\n|March 06, 2012_District_W.csv    |2013-11-24_District_L.csv |\n|November 10, 2014_District_V.csv |2013-11-30_District_A.csv |\n|November 24, 2013_District_L.csv |2014-07-13_District_H.csv |\n|November 30, 2013_District_A.csv |2014-10-06_District_N.csv |\n|October 06, 2014_District_N.csv  |2014-11-10_District_V.csv |\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}