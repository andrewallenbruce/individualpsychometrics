{
  "hash": "e164c1d9a8701d5ea63129cc37c166ee",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"OJS figures\"\n---\n\n\n\n```{ojs}\n//| echo: false\nviewof fsab = \nInputs.form({\n  ax: Inputs.range([-1,1], {\n    format: (x) => x,\n    value: 1, \n    step: .01, \n    label:html`<em>a<sub>x</sub></em>`,\n    labelStyle: \"width: 50px\"\n  }),\n  ay: Inputs.range(\n    [-1,1], \n    {value: 0.5, \n     step: .01, \n     label: html`<em>a<sub>y</sub></em>`}),\n  bx: Inputs.range(\n    [-1,1], \n    {value:0.5, \n     step: .01, \n     label: html`<em>b<sub>x</sub></em>`}),\n  by: Inputs.range(\n    [-1,1], \n    {value: 1, \n     step: .01, \n     label: html`<em>b<sub>y</sub></em>`})\n  })\nab=[{x0: 0, \n     y0: 0, \n     ax: fsab.ax, \n     ay: fsab.ay, \n     bx: fsab.bx, \n     by: fsab.by, \n     abx: fsab.ax + fsab.bx, \n     aby: fsab.ay + fsab.by, \n     theta: Math.atan2(fsab.ay + fsab.by, fsab.ax + fsab.bx), \n     thetaa: Math.atan2(fsab.ay, fsab.ax), \n     thetab: Math.atan2(fsab.by, fsab.bx), \n     a: 'a', \n     b: 'b', \n     ab:'a + b', \n     fill: '#ffffff', \n     r: 200}]\n\n```\n\n```{ojs}\n//| label: fig-vector-addition\n//| fig-cap: \"Adding vectors a and b.\"\n//| fig-cap-location: margin\n//| echo: false\nPlot.plot({height: 600, width: 600,\nx: {domain: [-2, 2], grid: true, ticks: 9},\ny: {domain: [-2, 2], grid: true, ticks: 9},\nstyle: {\n    fontSize: 14, fontFamily: \"equity_text_a_tab\"\n  },\nmarks: [\n  Plot.ruleY([0]),\n  Plot.ruleX([0]),\n  Plot.arrow(\n    ab, \n    {x1: \"x0\", \n     y1: \"y0\", \n     x2: \"ax\", \n     y2: \"ay\", \n     stroke: \"#8B1A1A\", \n     headAngle: 30, \n     headLength: 10, \n     fill: \"#8B1A1A\"}),\n  Plot.arrow(\n    ab, \n    {x1: \"ax\", \n     y1: \"ay\", \n     x2: \"abx\", \n     y2: \"aby\", \n     stroke: \"#27408B\", \n     headAngle: 30, \n     headLength: 10, \n     fill: \"#27408B\", \n     alpha: .5}),\n  Plot.arrow(\n    ab, \n    {x1: \"x0\", \n     y1: \"y0\", \n     x2: \"abx\", \n     y2: \"aby\", \n     stroke: \"#51315E\", \n     headAngle: 30, \n     headLength: 10, \n     fill: \"#51315E\"}),\n  Plot.dot(\n    ab, \n    {x: (d) => d.ax/2, \n     y: (d) => d.ay/2, \n     fill: \"fill\", \n     r: 7}),\n  Plot.dot(\n    ab, \n    {x: (d) => d.ax + d.bx/2, \n     y: (d) => d.ay + d.by/2, \n     fill: \"fill\", \n     r: 7}),\n  Plot.dot(\n    ab, \n    {x: (d) => d.abx/2, \n     y: (d) => d.aby/2, \n     fill: \"fill\", \n     r: 18}),\n  Plot.text(\n    ab, \n    {x: (d) => d.ax/2, \n     y: (d) => d.ay / 2, \n     text: 'a', \n     rotate: (d) => Math.atan(Math.tan(d.thetaa)) * -180 / Math.PI, \n     fill: '#8B1A1A'}),\n   Plot.text(\n     ab, \n     {x: (d) => d.ax + d.bx/2, \n      y: (d) => d.ay + d.by / 2, \n      text: 'b', \n      rotate: (d) => Math.atan(Math.tan(d.thetab)) * -180 / Math.PI, \n      fill: '#27408B'}),\n  Plot.text(\n    ab, \n    {x: (d) => d.abx/2, \n     y: (d) => d.aby / 2, \n     text: 'ab', \n     rotate: (d) => Math.atan(Math.tan(d.theta)) * -180 / Math.PI, \n     fill: '#51315E'})\n]})\n```\n\n::: {.cell .fig-cap-location-margin .tbl-cap-location-margin layout-align=\"center\" button_before='true' button_after='true' codelabel='Observable Code'}\n:::{.callout-note collapse=\"true\" appearance=\"minimal\"}\n## Observable Code for @fig-vector-addition\n\n```{.r .cell-code}\nviewof fsab = \nInputs.form({\n  ax: Inputs.range([-1,1], {\n    format: (x) => x,\n    value: 1, \n    step: .01, \n    label:html`<em>a<sub>x</sub></em>`,\n    labelStyle: \"width: 50px\"\n  }),\n  ay: Inputs.range(\n    [-1,1], \n    {value: 0.5, \n     step: .01, \n     label: html`<em>a<sub>y</sub></em>`}),\n  bx: Inputs.range(\n    [-1,1], \n    {value:0.5, \n     step: .01, \n     label: html`<em>b<sub>x</sub></em>`}),\n  by: Inputs.range(\n    [-1,1], \n    {value: 1, \n     step: .01, \n     label: html`<em>b<sub>y</sub></em>`})\n  })\nab=[{x0: 0, \n     y0: 0, \n     ax: fsab.ax, \n     ay: fsab.ay, \n     bx: fsab.bx, \n     by: fsab.by, \n     abx: fsab.ax + fsab.bx, \n     aby: fsab.ay + fsab.by, \n     theta: Math.atan2(fsab.ay + fsab.by, fsab.ax + fsab.bx), \n     thetaa: Math.atan2(fsab.ay, fsab.ax), \n     thetab: Math.atan2(fsab.by, fsab.bx), \n     a: 'a', \n     b: 'b', \n     ab:'a + b', \n     fill: '#ffffff', \n     r: 200}]\n\n\nPlot.plot({height: 600, width: 600,\nx: {domain: [-2, 2], grid: true, ticks: 9},\ny: {domain: [-2, 2], grid: true, ticks: 9},\nstyle: {\n    fontSize: 14, fontFamily: \"equity_text_a_tab\"\n  },\nmarks: [\n  Plot.ruleY([0]),\n  Plot.ruleX([0]),\n  Plot.arrow(\n    ab, \n    {x1: \"x0\", \n     y1: \"y0\", \n     x2: \"ax\", \n     y2: \"ay\", \n     stroke: \"#8B1A1A\", \n     headAngle: 30, \n     headLength: 10, \n     fill: \"#8B1A1A\"}),\n  Plot.arrow(\n    ab, \n    {x1: \"ax\", \n     y1: \"ay\", \n     x2: \"abx\", \n     y2: \"aby\", \n     stroke: \"#27408B\", \n     headAngle: 30, \n     headLength: 10, \n     fill: \"#27408B\", \n     alpha: .5}),\n  Plot.arrow(\n    ab, \n    {x1: \"x0\", \n     y1: \"y0\", \n     x2: \"abx\", \n     y2: \"aby\", \n     stroke: \"#51315E\", \n     headAngle: 30, \n     headLength: 10, \n     fill: \"#51315E\"}),\n  Plot.dot(\n    ab, \n    {x: (d) => d.ax/2, \n     y: (d) => d.ay/2, \n     fill: \"fill\", \n     r: 7}),\n  Plot.dot(\n    ab, \n    {x: (d) => d.ax + d.bx/2, \n     y: (d) => d.ay + d.by/2, \n     fill: \"fill\", \n     r: 7}),\n  Plot.dot(\n    ab, \n    {x: (d) => d.abx/2, \n     y: (d) => d.aby/2, \n     fill: \"fill\", \n     r: 18}),\n  Plot.text(\n    ab, \n    {x: (d) => d.ax/2, \n     y: (d) => d.ay / 2, \n     text: 'a', \n     rotate: (d) => Math.atan(Math.tan(d.thetaa)) * -180 / Math.PI, \n     fill: '#8B1A1A'}),\n   Plot.text(\n     ab, \n     {x: (d) => d.ax + d.bx/2, \n      y: (d) => d.ay + d.by / 2, \n      text: 'b', \n      rotate: (d) => Math.atan(Math.tan(d.thetab)) * -180 / Math.PI, \n      fill: '#27408B'}),\n  Plot.text(\n    ab, \n    {x: (d) => d.abx/2, \n     y: (d) => d.aby / 2, \n     text: 'ab', \n     rotate: (d) => Math.atan(Math.tan(d.theta)) * -180 / Math.PI, \n     fill: '#51315E'})\n]})\n```\n\n\n:::\n:::\n\n```{ojs}\nviewof fs = \nInputs.form({\n  xi: Inputs.range([-1,1], {\n    format: (x) => x,\n    value: 1, \n    step: .01, \n    label: md`*x* `,\n    labelStyle: \"width: 50px\"\n  }),\n  yi: Inputs.range(\n    [-1,1], \n    {value: 1, \n     step: .01, \n     vertical: true, \n     label: md`*y*`}),\n  a: Inputs.range(\n    [-5,5], \n    {value: 2, \n     step: .01, \n     label: md`*a* `, \n     description: 'Scalar'})\n  })\nax = fs.xi * fs.a\nay = fs.yi * fs.a\ntheta=Math.atan2(ay,ax)\ndd=[{\n  x: fs.xi, \n  y: fs.yi, \n  ax: ax, \n  ay: ay, \n  x0: 0, \n  y0: 0, \n  a: fs.a, \n  theta: theta }]\n\nns = Inputs.range().classList[0]\n\nhtml`\n<style>\nform.${ns} {--input-width: 600px; --label-width: 15px;}\n.${ns}-input>input[type=number] {flex-shrink:6;}\n</style>\n`\n```\n\n```{ojs}\n//| label: fig-scalar\n//| fig-cap: \"Multiplying a vector by a scalar changes its magnitude.\"\n//| fig-cap-location: margin\n\nPlot.plot({height: 600, width: 600,\nx: {domain: [-5, 5], grid: true, ticks: 9},\ny: {domain: [-5, 5], grid: true, ticks: 9},\nstyle: {\n    fontSize: 14, \n    fontFamily: \"equity_text_a_tab\"\n  },\nmarks: [\nPlot.ruleY([0]),\nPlot.ruleX([0]),\nPlot.arrow(\n  dd, \n  {x1: \"x0\", \n   y1: \"y0\", \n   x2: \"ax\", \n   y2: \"ay\", \n   stroke: \"#8B1A1A\", \n   headAngle: 30, \n   headLength: 10, \n   fill: \"#8B1A1A\"}),\nPlot.arrow(\n  dd, \n  {x1: \"x0\", \n   y1: \"y0\", \n   x2: \"x\", \n   y2: \"y\", \n   stroke: \"#27408B\", \n   headAngle: 30, \n   headLength: 10, \n   fill: \"#27408B\"}),\n  Plot.text(\n    dd, \n    {x: (d) => d.ax + .3 * Math.cos(d.theta), \n     y: (d) => d.ay + .3 * Math.sin(d.theta), \n     text: (d) => '('+(d.ax).toFixed(2)+', '+(d.ay).toFixed(2)+')'})\n]})\n```\n\n::: {.cell .fig-cap-location-margin .tbl-cap-location-margin layout-align=\"center\" button_before='true' button_after='true' codelabel='Observable Code'}\n:::{.callout-note collapse=\"true\" appearance=\"minimal\"}\n## Observable Code for @fig-scalar\n\n```{.r .cell-code}\nviewof fs = \nInputs.form({\n  xi: Inputs.range([-1,1], {\n    format: (x) => x,\n    value: 1, \n    step: .01, \n    label: md`*x* `,\n    labelStyle: \"width: 50px\"\n  }),\n  yi: Inputs.range(\n    [-1,1], \n    {value: 1, \n     step: .01, \n     vertical: true, \n     label: md`*y*`}),\n  a: Inputs.range(\n    [-5,5], \n    {value: 2, \n     step: .01, \n     label: md`*a* `, \n     description: 'Scalar'})\n  })\nax = fs.xi * fs.a\nay = fs.yi * fs.a\ntheta=Math.atan2(ay,ax)\ndd=[{\n  x: fs.xi, \n  y: fs.yi, \n  ax: ax, \n  ay: ay, \n  x0: 0, \n  y0: 0, \n  a: fs.a, \n  theta: theta }]\n\nns = Inputs.range().classList[0]\n\nhtml`\n<style>\nform.${ns} {--input-width: 600px; --label-width: 15px;}\n.${ns}-input>input[type=number] {flex-shrink:6;}\n</style>\n`\nPlot.plot({height: 600, width: 600,\nx: {domain: [-5, 5], grid: true, ticks: 9},\ny: {domain: [-5, 5], grid: true, ticks: 9},\nstyle: {\n    fontSize: 14, \n    fontFamily: \"equity_text_a_tab\"\n  },\nmarks: [\nPlot.ruleY([0]),\nPlot.ruleX([0]),\nPlot.arrow(\n  dd, \n  {x1: \"x0\", \n   y1: \"y0\", \n   x2: \"ax\", \n   y2: \"ay\", \n   stroke: \"#8B1A1A\", \n   headAngle: 30, \n   headLength: 10, \n   fill: \"#8B1A1A\"}),\nPlot.arrow(\n  dd, \n  {x1: \"x0\", \n   y1: \"y0\", \n   x2: \"x\", \n   y2: \"y\", \n   stroke: \"#27408B\", \n   headAngle: 30, \n   headLength: 10, \n   fill: \"#27408B\"}),\n  Plot.text(\n    dd, \n    {x: (d) => d.ax + .3 * Math.cos(d.theta), \n     y: (d) => d.ay + .3 * Math.sin(d.theta), \n     text: (d) => '('+(d.ax).toFixed(2)+', '+(d.ay).toFixed(2)+')'})\n]})\n```\n\n\n:::\n:::\n",
    "supporting": [
      "ojs_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}